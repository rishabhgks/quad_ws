// Generated by gencpp from file quadrotor_tunnel_nav/Com.msg
// DO NOT EDIT!


#ifndef QUADROTOR_TUNNEL_NAV_MESSAGE_COM_H
#define QUADROTOR_TUNNEL_NAV_MESSAGE_COM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>

namespace quadrotor_tunnel_nav
{
template <class ContainerAllocator>
struct Com_
{
  typedef Com_<ContainerAllocator> Type;

  Com_()
    : message()
    , vel()  {
    }
  Com_(const ContainerAllocator& _alloc)
    : message(_alloc)
    , vel(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _vel_type;
  _vel_type vel;





  typedef boost::shared_ptr< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> const> ConstPtr;

}; // struct Com_

typedef ::quadrotor_tunnel_nav::Com_<std::allocator<void> > Com;

typedef boost::shared_ptr< ::quadrotor_tunnel_nav::Com > ComPtr;
typedef boost::shared_ptr< ::quadrotor_tunnel_nav::Com const> ComConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_tunnel_nav::Com_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace quadrotor_tunnel_nav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'quadrotor_tunnel_nav': ['/home/rishabh/quad_ws/src/quadrotor-tunnel-nav/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a6a2fdbdfea337c6d5c872e8c0b98e2";
  }

  static const char* value(const ::quadrotor_tunnel_nav::Com_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a6a2fdbdfea337cULL;
  static const uint64_t static_value2 = 0x6d5c872e8c0b98e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_tunnel_nav/Com";
  }

  static const char* value(const ::quadrotor_tunnel_nav::Com_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string message\n\
geometry_msgs/Twist vel\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::quadrotor_tunnel_nav::Com_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message);
      stream.next(m.vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Com_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_tunnel_nav::Com_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_tunnel_nav::Com_<ContainerAllocator>& v)
  {
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_TUNNEL_NAV_MESSAGE_COM_H
