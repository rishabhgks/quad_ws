// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: siminfo.proto

#ifndef PROTOBUF_siminfo_2eproto__INCLUDED
#define PROTOBUF_siminfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace adhoc {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_siminfo_2eproto();
void protobuf_AssignDesc_siminfo_2eproto();
void protobuf_ShutdownFile_siminfo_2eproto();

class SimInfo;

// ===================================================================

class SimInfo : public ::google::protobuf::Message {
 public:
  SimInfo();
  virtual ~SimInfo();

  SimInfo(const SimInfo& from);

  inline SimInfo& operator=(const SimInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimInfo& default_instance();

  void Swap(SimInfo* other);

  // implements Message ----------------------------------------------

  SimInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimInfo& from);
  void MergeFrom(const SimInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // required string robot_name = 2;
  inline bool has_robot_name() const;
  inline void clear_robot_name();
  static const int kRobotNameFieldNumber = 2;
  inline const ::std::string& robot_name() const;
  inline void set_robot_name(const ::std::string& value);
  inline void set_robot_name(const char* value);
  inline void set_robot_name(const char* value, size_t size);
  inline ::std::string* mutable_robot_name();
  inline ::std::string* release_robot_name();
  inline void set_allocated_robot_name(::std::string* robot_name);

  // optional double delay_time = 3;
  inline bool has_delay_time() const;
  inline void clear_delay_time();
  static const int kDelayTimeFieldNumber = 3;
  inline double delay_time() const;
  inline void set_delay_time(double value);

  // optional uint32 sent_message_count = 4;
  inline bool has_sent_message_count() const;
  inline void clear_sent_message_count();
  static const int kSentMessageCountFieldNumber = 4;
  inline ::google::protobuf::uint32 sent_message_count() const;
  inline void set_sent_message_count(::google::protobuf::uint32 value);

  // optional uint32 recv_message_count = 5;
  inline bool has_recv_message_count() const;
  inline void clear_recv_message_count();
  static const int kRecvMessageCountFieldNumber = 5;
  inline ::google::protobuf::uint32 recv_message_count() const;
  inline void set_recv_message_count(::google::protobuf::uint32 value);

  // optional uint32 total_hops = 6;
  inline bool has_total_hops() const;
  inline void clear_total_hops();
  static const int kTotalHopsFieldNumber = 6;
  inline ::google::protobuf::uint32 total_hops() const;
  inline void set_total_hops(::google::protobuf::uint32 value);

  // optional double total_round_trip_time = 7;
  inline bool has_total_round_trip_time() const;
  inline void clear_total_round_trip_time();
  static const int kTotalRoundTripTimeFieldNumber = 7;
  inline double total_round_trip_time() const;
  inline void set_total_round_trip_time(double value);

  // optional double total_dist_comm = 8;
  inline bool has_total_dist_comm() const;
  inline void clear_total_dist_comm();
  static const int kTotalDistCommFieldNumber = 8;
  inline double total_dist_comm() const;
  inline void set_total_dist_comm(double value);

  // optional double total_dist_motion = 9;
  inline bool has_total_dist_motion() const;
  inline void clear_total_dist_motion();
  static const int kTotalDistMotionFieldNumber = 9;
  inline double total_dist_motion() const;
  inline void set_total_dist_motion(double value);

  // @@protoc_insertion_point(class_scope:adhoc.msgs.SimInfo)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_robot_name();
  inline void clear_has_robot_name();
  inline void set_has_delay_time();
  inline void clear_has_delay_time();
  inline void set_has_sent_message_count();
  inline void clear_has_sent_message_count();
  inline void set_has_recv_message_count();
  inline void clear_has_recv_message_count();
  inline void set_has_total_hops();
  inline void clear_has_total_hops();
  inline void set_has_total_round_trip_time();
  inline void clear_has_total_round_trip_time();
  inline void set_has_total_dist_comm();
  inline void clear_has_total_dist_comm();
  inline void set_has_total_dist_motion();
  inline void clear_has_total_dist_motion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* state_;
  ::std::string* robot_name_;
  double delay_time_;
  ::google::protobuf::uint32 sent_message_count_;
  ::google::protobuf::uint32 recv_message_count_;
  double total_round_trip_time_;
  double total_dist_comm_;
  double total_dist_motion_;
  ::google::protobuf::uint32 total_hops_;
  friend void  protobuf_AddDesc_siminfo_2eproto();
  friend void protobuf_AssignDesc_siminfo_2eproto();
  friend void protobuf_ShutdownFile_siminfo_2eproto();

  void InitAsDefaultInstance();
  static SimInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// SimInfo

// required string state = 1;
inline bool SimInfo::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimInfo::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimInfo::clear_state() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& SimInfo::state() const {
  // @@protoc_insertion_point(field_get:adhoc.msgs.SimInfo.state)
  return *state_;
}
inline void SimInfo::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set:adhoc.msgs.SimInfo.state)
}
inline void SimInfo::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set_char:adhoc.msgs.SimInfo.state)
}
inline void SimInfo::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:adhoc.msgs.SimInfo.state)
}
inline ::std::string* SimInfo::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:adhoc.msgs.SimInfo.state)
  return state_;
}
inline ::std::string* SimInfo::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SimInfo::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:adhoc.msgs.SimInfo.state)
}

// required string robot_name = 2;
inline bool SimInfo::has_robot_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimInfo::set_has_robot_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimInfo::clear_has_robot_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimInfo::clear_robot_name() {
  if (robot_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    robot_name_->clear();
  }
  clear_has_robot_name();
}
inline const ::std::string& SimInfo::robot_name() const {
  // @@protoc_insertion_point(field_get:adhoc.msgs.SimInfo.robot_name)
  return *robot_name_;
}
inline void SimInfo::set_robot_name(const ::std::string& value) {
  set_has_robot_name();
  if (robot_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    robot_name_ = new ::std::string;
  }
  robot_name_->assign(value);
  // @@protoc_insertion_point(field_set:adhoc.msgs.SimInfo.robot_name)
}
inline void SimInfo::set_robot_name(const char* value) {
  set_has_robot_name();
  if (robot_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    robot_name_ = new ::std::string;
  }
  robot_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:adhoc.msgs.SimInfo.robot_name)
}
inline void SimInfo::set_robot_name(const char* value, size_t size) {
  set_has_robot_name();
  if (robot_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    robot_name_ = new ::std::string;
  }
  robot_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:adhoc.msgs.SimInfo.robot_name)
}
inline ::std::string* SimInfo::mutable_robot_name() {
  set_has_robot_name();
  if (robot_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    robot_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:adhoc.msgs.SimInfo.robot_name)
  return robot_name_;
}
inline ::std::string* SimInfo::release_robot_name() {
  clear_has_robot_name();
  if (robot_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = robot_name_;
    robot_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SimInfo::set_allocated_robot_name(::std::string* robot_name) {
  if (robot_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete robot_name_;
  }
  if (robot_name) {
    set_has_robot_name();
    robot_name_ = robot_name;
  } else {
    clear_has_robot_name();
    robot_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:adhoc.msgs.SimInfo.robot_name)
}

// optional double delay_time = 3;
inline bool SimInfo::has_delay_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimInfo::set_has_delay_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimInfo::clear_has_delay_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimInfo::clear_delay_time() {
  delay_time_ = 0;
  clear_has_delay_time();
}
inline double SimInfo::delay_time() const {
  // @@protoc_insertion_point(field_get:adhoc.msgs.SimInfo.delay_time)
  return delay_time_;
}
inline void SimInfo::set_delay_time(double value) {
  set_has_delay_time();
  delay_time_ = value;
  // @@protoc_insertion_point(field_set:adhoc.msgs.SimInfo.delay_time)
}

// optional uint32 sent_message_count = 4;
inline bool SimInfo::has_sent_message_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimInfo::set_has_sent_message_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimInfo::clear_has_sent_message_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimInfo::clear_sent_message_count() {
  sent_message_count_ = 0u;
  clear_has_sent_message_count();
}
inline ::google::protobuf::uint32 SimInfo::sent_message_count() const {
  // @@protoc_insertion_point(field_get:adhoc.msgs.SimInfo.sent_message_count)
  return sent_message_count_;
}
inline void SimInfo::set_sent_message_count(::google::protobuf::uint32 value) {
  set_has_sent_message_count();
  sent_message_count_ = value;
  // @@protoc_insertion_point(field_set:adhoc.msgs.SimInfo.sent_message_count)
}

// optional uint32 recv_message_count = 5;
inline bool SimInfo::has_recv_message_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimInfo::set_has_recv_message_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SimInfo::clear_has_recv_message_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SimInfo::clear_recv_message_count() {
  recv_message_count_ = 0u;
  clear_has_recv_message_count();
}
inline ::google::protobuf::uint32 SimInfo::recv_message_count() const {
  // @@protoc_insertion_point(field_get:adhoc.msgs.SimInfo.recv_message_count)
  return recv_message_count_;
}
inline void SimInfo::set_recv_message_count(::google::protobuf::uint32 value) {
  set_has_recv_message_count();
  recv_message_count_ = value;
  // @@protoc_insertion_point(field_set:adhoc.msgs.SimInfo.recv_message_count)
}

// optional uint32 total_hops = 6;
inline bool SimInfo::has_total_hops() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimInfo::set_has_total_hops() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SimInfo::clear_has_total_hops() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SimInfo::clear_total_hops() {
  total_hops_ = 0u;
  clear_has_total_hops();
}
inline ::google::protobuf::uint32 SimInfo::total_hops() const {
  // @@protoc_insertion_point(field_get:adhoc.msgs.SimInfo.total_hops)
  return total_hops_;
}
inline void SimInfo::set_total_hops(::google::protobuf::uint32 value) {
  set_has_total_hops();
  total_hops_ = value;
  // @@protoc_insertion_point(field_set:adhoc.msgs.SimInfo.total_hops)
}

// optional double total_round_trip_time = 7;
inline bool SimInfo::has_total_round_trip_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimInfo::set_has_total_round_trip_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SimInfo::clear_has_total_round_trip_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SimInfo::clear_total_round_trip_time() {
  total_round_trip_time_ = 0;
  clear_has_total_round_trip_time();
}
inline double SimInfo::total_round_trip_time() const {
  // @@protoc_insertion_point(field_get:adhoc.msgs.SimInfo.total_round_trip_time)
  return total_round_trip_time_;
}
inline void SimInfo::set_total_round_trip_time(double value) {
  set_has_total_round_trip_time();
  total_round_trip_time_ = value;
  // @@protoc_insertion_point(field_set:adhoc.msgs.SimInfo.total_round_trip_time)
}

// optional double total_dist_comm = 8;
inline bool SimInfo::has_total_dist_comm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SimInfo::set_has_total_dist_comm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SimInfo::clear_has_total_dist_comm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SimInfo::clear_total_dist_comm() {
  total_dist_comm_ = 0;
  clear_has_total_dist_comm();
}
inline double SimInfo::total_dist_comm() const {
  // @@protoc_insertion_point(field_get:adhoc.msgs.SimInfo.total_dist_comm)
  return total_dist_comm_;
}
inline void SimInfo::set_total_dist_comm(double value) {
  set_has_total_dist_comm();
  total_dist_comm_ = value;
  // @@protoc_insertion_point(field_set:adhoc.msgs.SimInfo.total_dist_comm)
}

// optional double total_dist_motion = 9;
inline bool SimInfo::has_total_dist_motion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SimInfo::set_has_total_dist_motion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SimInfo::clear_has_total_dist_motion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SimInfo::clear_total_dist_motion() {
  total_dist_motion_ = 0;
  clear_has_total_dist_motion();
}
inline double SimInfo::total_dist_motion() const {
  // @@protoc_insertion_point(field_get:adhoc.msgs.SimInfo.total_dist_motion)
  return total_dist_motion_;
}
inline void SimInfo::set_total_dist_motion(double value) {
  set_has_total_dist_motion();
  total_dist_motion_ = value;
  // @@protoc_insertion_point(field_set:adhoc.msgs.SimInfo.total_dist_motion)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace adhoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_siminfo_2eproto__INCLUDED
