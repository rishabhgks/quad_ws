// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: siminfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "siminfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace adhoc {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* SimInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_siminfo_2eproto() {
  protobuf_AddDesc_siminfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "siminfo.proto");
  GOOGLE_CHECK(file != NULL);
  SimInfo_descriptor_ = file->message_type(0);
  static const int SimInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, robot_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, delay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, sent_message_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, recv_message_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, total_hops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, total_round_trip_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, total_dist_comm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, total_dist_motion_),
  };
  SimInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimInfo_descriptor_,
      SimInfo::default_instance_,
      SimInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_siminfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimInfo_descriptor_, &SimInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_siminfo_2eproto() {
  delete SimInfo::default_instance_;
  delete SimInfo_reflection_;
}

void protobuf_AddDesc_siminfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsiminfo.proto\022\nadhoc.msgs\"\337\001\n\007SimInfo\022"
    "\r\n\005state\030\001 \002(\t\022\022\n\nrobot_name\030\002 \002(\t\022\022\n\nde"
    "lay_time\030\003 \001(\001\022\032\n\022sent_message_count\030\004 \001"
    "(\r\022\032\n\022recv_message_count\030\005 \001(\r\022\022\n\ntotal_"
    "hops\030\006 \001(\r\022\035\n\025total_round_trip_time\030\007 \001("
    "\001\022\027\n\017total_dist_comm\030\010 \001(\001\022\031\n\021total_dist"
    "_motion\030\t \001(\001", 253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "siminfo.proto", &protobuf_RegisterTypes);
  SimInfo::default_instance_ = new SimInfo();
  SimInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_siminfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_siminfo_2eproto {
  StaticDescriptorInitializer_siminfo_2eproto() {
    protobuf_AddDesc_siminfo_2eproto();
  }
} static_descriptor_initializer_siminfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SimInfo::kStateFieldNumber;
const int SimInfo::kRobotNameFieldNumber;
const int SimInfo::kDelayTimeFieldNumber;
const int SimInfo::kSentMessageCountFieldNumber;
const int SimInfo::kRecvMessageCountFieldNumber;
const int SimInfo::kTotalHopsFieldNumber;
const int SimInfo::kTotalRoundTripTimeFieldNumber;
const int SimInfo::kTotalDistCommFieldNumber;
const int SimInfo::kTotalDistMotionFieldNumber;
#endif  // !_MSC_VER

SimInfo::SimInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adhoc.msgs.SimInfo)
}

void SimInfo::InitAsDefaultInstance() {
}

SimInfo::SimInfo(const SimInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:adhoc.msgs.SimInfo)
}

void SimInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delay_time_ = 0;
  sent_message_count_ = 0u;
  recv_message_count_ = 0u;
  total_hops_ = 0u;
  total_round_trip_time_ = 0;
  total_dist_comm_ = 0;
  total_dist_motion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimInfo::~SimInfo() {
  // @@protoc_insertion_point(destructor:adhoc.msgs.SimInfo)
  SharedDtor();
}

void SimInfo::SharedDtor() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (robot_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete robot_name_;
  }
  if (this != default_instance_) {
  }
}

void SimInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimInfo_descriptor_;
}

const SimInfo& SimInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_siminfo_2eproto();
  return *default_instance_;
}

SimInfo* SimInfo::default_instance_ = NULL;

SimInfo* SimInfo::New() const {
  return new SimInfo;
}

void SimInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SimInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(delay_time_, total_dist_comm_);
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
    if (has_robot_name()) {
      if (robot_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        robot_name_->clear();
      }
    }
    total_hops_ = 0u;
  }
  total_dist_motion_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adhoc.msgs.SimInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_robot_name;
        break;
      }

      // required string robot_name = 2;
      case 2: {
        if (tag == 18) {
         parse_robot_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_name().data(), this->robot_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robot_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_delay_time;
        break;
      }

      // optional double delay_time = 3;
      case 3: {
        if (tag == 25) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sent_message_count;
        break;
      }

      // optional uint32 sent_message_count = 4;
      case 4: {
        if (tag == 32) {
         parse_sent_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sent_message_count_)));
          set_has_sent_message_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_recv_message_count;
        break;
      }

      // optional uint32 recv_message_count = 5;
      case 5: {
        if (tag == 40) {
         parse_recv_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_message_count_)));
          set_has_recv_message_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_hops;
        break;
      }

      // optional uint32 total_hops = 6;
      case 6: {
        if (tag == 48) {
         parse_total_hops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_hops_)));
          set_has_total_hops();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_total_round_trip_time;
        break;
      }

      // optional double total_round_trip_time = 7;
      case 7: {
        if (tag == 57) {
         parse_total_round_trip_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_round_trip_time_)));
          set_has_total_round_trip_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_total_dist_comm;
        break;
      }

      // optional double total_dist_comm = 8;
      case 8: {
        if (tag == 65) {
         parse_total_dist_comm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_dist_comm_)));
          set_has_total_dist_comm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_total_dist_motion;
        break;
      }

      // optional double total_dist_motion = 9;
      case 9: {
        if (tag == 73) {
         parse_total_dist_motion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_dist_motion_)));
          set_has_total_dist_motion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adhoc.msgs.SimInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adhoc.msgs.SimInfo)
  return false;
#undef DO_
}

void SimInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adhoc.msgs.SimInfo)
  // required string state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->state(), output);
  }

  // required string robot_name = 2;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robot_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->robot_name(), output);
  }

  // optional double delay_time = 3;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->delay_time(), output);
  }

  // optional uint32 sent_message_count = 4;
  if (has_sent_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sent_message_count(), output);
  }

  // optional uint32 recv_message_count = 5;
  if (has_recv_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->recv_message_count(), output);
  }

  // optional uint32 total_hops = 6;
  if (has_total_hops()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_hops(), output);
  }

  // optional double total_round_trip_time = 7;
  if (has_total_round_trip_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->total_round_trip_time(), output);
  }

  // optional double total_dist_comm = 8;
  if (has_total_dist_comm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->total_dist_comm(), output);
  }

  // optional double total_dist_motion = 9;
  if (has_total_dist_motion()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->total_dist_motion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adhoc.msgs.SimInfo)
}

::google::protobuf::uint8* SimInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adhoc.msgs.SimInfo)
  // required string state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->state(), target);
  }

  // required string robot_name = 2;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robot_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->robot_name(), target);
  }

  // optional double delay_time = 3;
  if (has_delay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->delay_time(), target);
  }

  // optional uint32 sent_message_count = 4;
  if (has_sent_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sent_message_count(), target);
  }

  // optional uint32 recv_message_count = 5;
  if (has_recv_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->recv_message_count(), target);
  }

  // optional uint32 total_hops = 6;
  if (has_total_hops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_hops(), target);
  }

  // optional double total_round_trip_time = 7;
  if (has_total_round_trip_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->total_round_trip_time(), target);
  }

  // optional double total_dist_comm = 8;
  if (has_total_dist_comm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->total_dist_comm(), target);
  }

  // optional double total_dist_motion = 9;
  if (has_total_dist_motion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->total_dist_motion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adhoc.msgs.SimInfo)
  return target;
}

int SimInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // required string robot_name = 2;
    if (has_robot_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_name());
    }

    // optional double delay_time = 3;
    if (has_delay_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 sent_message_count = 4;
    if (has_sent_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sent_message_count());
    }

    // optional uint32 recv_message_count = 5;
    if (has_recv_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_message_count());
    }

    // optional uint32 total_hops = 6;
    if (has_total_hops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_hops());
    }

    // optional double total_round_trip_time = 7;
    if (has_total_round_trip_time()) {
      total_size += 1 + 8;
    }

    // optional double total_dist_comm = 8;
    if (has_total_dist_comm()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double total_dist_motion = 9;
    if (has_total_dist_motion()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimInfo::MergeFrom(const SimInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_robot_name()) {
      set_robot_name(from.robot_name());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
    if (from.has_sent_message_count()) {
      set_sent_message_count(from.sent_message_count());
    }
    if (from.has_recv_message_count()) {
      set_recv_message_count(from.recv_message_count());
    }
    if (from.has_total_hops()) {
      set_total_hops(from.total_hops());
    }
    if (from.has_total_round_trip_time()) {
      set_total_round_trip_time(from.total_round_trip_time());
    }
    if (from.has_total_dist_comm()) {
      set_total_dist_comm(from.total_dist_comm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_dist_motion()) {
      set_total_dist_motion(from.total_dist_motion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInfo::CopyFrom(const SimInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SimInfo::Swap(SimInfo* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(robot_name_, other->robot_name_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(sent_message_count_, other->sent_message_count_);
    std::swap(recv_message_count_, other->recv_message_count_);
    std::swap(total_hops_, other->total_hops_);
    std::swap(total_round_trip_time_, other->total_round_trip_time_);
    std::swap(total_dist_comm_, other->total_dist_comm_);
    std::swap(total_dist_motion_, other->total_dist_motion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimInfo_descriptor_;
  metadata.reflection = SimInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace adhoc

// @@protoc_insertion_point(global_scope)
