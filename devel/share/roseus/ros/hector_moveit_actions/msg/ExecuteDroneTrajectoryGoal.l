;; Auto-generated. Do not edit!


(when (boundp 'hector_moveit_actions::ExecuteDroneTrajectoryGoal)
  (if (not (find-package "HECTOR_MOVEIT_ACTIONS"))
    (make-package "HECTOR_MOVEIT_ACTIONS"))
  (shadow 'ExecuteDroneTrajectoryGoal (find-package "HECTOR_MOVEIT_ACTIONS")))
(unless (find-package "HECTOR_MOVEIT_ACTIONS::EXECUTEDRONETRAJECTORYGOAL")
  (make-package "HECTOR_MOVEIT_ACTIONS::EXECUTEDRONETRAJECTORYGOAL"))

(in-package "ROS")
;;//! \htmlinclude ExecuteDroneTrajectoryGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass hector_moveit_actions::ExecuteDroneTrajectoryGoal
  :super ros::object
  :slots (_trajectory ))

(defmethod hector_moveit_actions::ExecuteDroneTrajectoryGoal
  (:init
   (&key
    ((:trajectory __trajectory) (let (r) (dotimes (i 0) (push (instance geometry_msgs::Pose :init) r)) r))
    )
   (send-super :init)
   (setq _trajectory __trajectory)
   self)
  (:trajectory
   (&rest __trajectory)
   (if (keywordp (car __trajectory))
       (send* _trajectory __trajectory)
     (progn
       (if __trajectory (setq _trajectory (car __trajectory)))
       _trajectory)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Pose[] _trajectory
    (apply #'+ (send-all _trajectory :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Pose[] _trajectory
     (write-long (length _trajectory) s)
     (dolist (elem _trajectory)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Pose[] _trajectory
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _trajectory (let (r) (dotimes (i n) (push (instance geometry_msgs::Pose :init) r)) r))
     (dolist (elem- _trajectory)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get hector_moveit_actions::ExecuteDroneTrajectoryGoal :md5sum-) "43c2c1b6194b60b72c28b093ef641eb5")
(setf (get hector_moveit_actions::ExecuteDroneTrajectoryGoal :datatype-) "hector_moveit_actions/ExecuteDroneTrajectoryGoal")
(setf (get hector_moveit_actions::ExecuteDroneTrajectoryGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal definition
geometry_msgs/Pose[] trajectory

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :hector_moveit_actions/ExecuteDroneTrajectoryGoal "43c2c1b6194b60b72c28b093ef641eb5")


